Due to my laptop completely dying on me and being sent away I am without a laptop with the required apps for at least a week
if not longer. Due to this all my work will have to be done on my home computer. I will be following the class sessions 
and documenting in detail the class material on paper so that I can replicate what was done in class at home. Because I am 
documenting in such detail I will be using my notes for my journal entries. 

For todays session we are learning to create a react app from scratch without using the react-app boilerplate. This is a 
good exercise for us as it prevents us becoming dependent on the boilerplate.
Below is my documentation on the steps required to build this app from scratch:

Begin with the following folder structure:

react-class (folder)
    public (folder)
    scripts (folder)

1. The first thing to do is create an index.html file inside the project. With in this start typing html and tab over on the line that says 'html:5' this will add the following:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    
</body>
</html>

2. Place in the body: <script src="https://unpkg.com/react@16.8.0/umd/react.development.js"></script>

3. Add also: <script src="https://unpkg.com/react@16.8.0/umd/react-dom.development.js"></script>

4. Add a live server if it doesn't already exist. Either 'npm i -g live-server' or if want to ensure the lastest version is added 'npm i -g live-server@latest'

5. To test the live server enter into the console 'live-server (root folder name)'

6. Next Babel is needed so that the JSX is understood. Begin by entering 'npm init -y' to set up the package.json. -y will set it up automatically. Ommit if want to do it manually.

7. To set up Babel enter into the console 'npm install --save babel-preset-env@latest babel-preset-react@latest'. If ever want to uninstall just replace 'install' with 'uninstall'.

8. Should now be able to view my package.json to see all dependencies including the Babel just installed.

9. In react-class create a folder called 'src'. In this create two js files 'app.js' and 'es6.js'.

10. In the index.html body insert: <script src="/scripts/app.js"></script>

11. To test this go to src/app.js and place in it:

    let template =(
        <div>
            <p>Hello Class!</p>
        </div>
    )

    let root = document.getElementById('app')

    ReactDOM.render(template, root)

12. To test if it is working type in the console: babel src/app.js --out-file=public/scripts/app.js -- presets=env,react

13. In es6.js insert:

    class Student {
        constructor(name) {
            this.name = name }
        getGreeting() {
            return `Hello ${this.name}!`
        }
    }

    const FirstStudent = new Student ('Daniel')
    console.log(FirstStudent.getGreeting)

14. Finally to test thsi last part insert into the console: babel src/app.js --out-file=public/scripts/es6.js -- presets=env,react
